/*
==============================================================================
    NextITS: Pipeline to process fungal ITS amplicons
==============================================================================
    Default config options for all compute environments
------------------------------------------------------------------------------
*/


// Global default params, used in configs
params {

    // Boilerplate options
    outdir                     = "${launchDir}/results"
    tracedir                   = "${outdir}/pipeline_info"
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    enable_conda               = false

}


// Process-specific parameters
process {

    ////////// Step-1 processes

    // QC - PacBio single-end reads
    // vsearch currently does not suppot multithreading for `--fastq_filter`
    // see https://github.com/torognes/vsearch/issues/466
    withName:qc_se{
        cpus = 1
    }

    // QC - Illumina paired-end reads
    withName:qc_pe{
        // max threads for fastp = 16
        cpus = 8
    }

    // Primer disambiguation
    withName:disambiguate{
        cpus = 1
    }

    // Demultiplexing of PacBio reads (with LIMA)
    withName:demux{
        cpus = 8
    }

    // Demultiplexing merged Illumina reads
    withName:demux_illumina{
        cpus = 8
    }

    // Demultiplexing non-merged Illumina reads
    withName:demux_illumina_notmerged{
        cpus = 8
    }

    // Merging of Illumina PE reads
    withName:merge_pe{
        cpus = 8
    }
    
    // Modify barcodes for cutadapt (Illumina only)
    withName:prep_barcodes{
        cpus = 1
    }

   // Demultiplexing of Illumina reads (with cutadapt)
    withName:demux_illumina{
        cpus = 8
    }

    // Check primers
    withName:primer_check{
        cpus = 1
    }

    // ITSx
    withName:itsx{
        cpus = 2
    }

    // Sequence quality tables
    withName:seq_qual{
        cpus = 1
    }

    // Homopolymer compression
    withName:homopolymer {
        cpus = 1
    }

    // Reference-based chimera removal
    withName:chimera_ref {
        cpus = 1
    }

    // Chimera rescue
    withName:chimera_rescue {
        cpus = 1
    }

    // De novo chimera search
    withName:chimera_denovo {
        cpus = 1
    }

    // Aggregate de novo chimeras
    withName:chimera_denovo_agg {
        cpus = 1
    }

    // Global dereplication
    withName:glob_derep {
        cpus = 1
    }

    // Pool sequences (for ASV table)
    withName:pool_seqs {
        cpus = 3
    }

    // OTU clustering
    withName:otu_clust {
        cpus = 8
    }

    // Create OTU table
    withName:otu_tab {
        cpus = 8
    }

    // Tag-jump removal
    withName:tj {
        cpus = 1
    }

    // Create sequence table
     withName:prep_seqtab {
        cpus = 1
    }

    // Read count summary
    withName:read_counts {
        cpus = 5
    }

    // Read count summary
    // For a quick workflow for demultiplexing and estimation of the number of reads per sample
    withName:quick_stats {
        cpus = 4
    }



    ////////// Step-2 processes

    // Dereplication (currently, only single-threaded)
    withName:dereplication {
        cpus = 1
    }

    // 100% clustering with sequence length variation allowed (UNITE-style)
    withName:dereplication_unite {
        cpus = 8
    }

    // UNOISE
    withName:unoise {
        cpus = 8
    }

    // VSEARCH clustering
    withName:cluster_vsearch {
        cpus = 8
    }

    // SWARM clustering
    withName:cluster_swarm {
        cpus = 8
    }

    // Summarize sequence abundance by OTU
    withName:summarize {
        cpus = 4
    }

    // Post-clustering curation with LULU
    withName:lulu {
        cpus = 8
    }

}  // end of process configs




profiles {

    // Docker-based profile
    docker {
        docker.enabled         = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        // Container specifications are here
        includeConfig 'conf/docker.config'
    }

    // Singularity-based profile
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        // Container specifications are here
        includeConfig 'conf/singularity.config'
    }

    // Larger resource amount (e.g., CPUs) for execution on HPC
    hpc {
        includeConfig 'conf/hpc.config'
    }


}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}


manifest {
    name            = 'NextITS'
    author          = 'Vladimir Mikryukov'
    homePage        = 'https://github.com/vmikk/NextITS'
    description     = 'Pipeline to process fungal ITS amplicons sequenced with PacBio'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.6'
    version         = '0.2.0'
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

